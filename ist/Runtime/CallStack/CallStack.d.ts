import { CallStackElement } from './Element';
import { CallStackThread } from './Thread';
import { Pointer } from '../Pointer';
import { RuntimeStory } from '../Story/Story';
import { PushPopType } from '../PushPopType';
import { RuntimeObject } from '../Object';
export declare class CallStack {
    private _threads;
    get threads(): CallStackThread[];
    private _threadCounter;
    get threadCounter(): number;
    private _startOfRoot;
    get startOfRoot(): Pointer;
    get callStack(): CallStackElement[];
    get elements(): CallStackElement[];
    get depth(): number;
    get currentElement(): CallStackElement;
    get currentElementIndex(): number;
    get currentThread(): CallStackThread;
    set currentThread(value: CallStackThread);
    get canPop(): boolean;
    constructor(from: RuntimeStory | CallStack);
    readonly Reset: () => void;
    readonly SetJsonToken: (jObject: Record<string, any>, storyContext: RuntimeStory) => void;
    readonly GetSerializedRepresentation: () => {
        threads: object[];
        threadCounter: number;
    };
    readonly WriteJson: (spaces?: number | undefined) => string;
    readonly PushThread: () => void;
    readonly ForkThread: () => CallStackThread;
    readonly PopThread: () => void;
    get canPopThread(): boolean;
    get elementIsEvaluateFromGame(): boolean;
    readonly Push: (type: PushPopType, externalEvaluationStackHeight?: number, outputStreamLengthWithPushed?: number) => void;
    readonly CanPop: (type?: PushPopType) => boolean;
    readonly Pop: (type?: PushPopType) => void;
    readonly GetTemporaryVariableWithName: (name: string, contextIndex?: number) => RuntimeObject;
    readonly SetTemporaryVariable: (name: string, value: RuntimeObject, declareNew: boolean, contextIdx?: number) => void;
    readonly ContextForVariableNamed: (name: string) => number;
    readonly ThreadWithIndex: (index: number) => CallStackThread;
    get callStackTrace(): string;
}

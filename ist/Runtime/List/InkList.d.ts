import { RuntimeInkListItem } from './InkListItem';
import { RuntimeListDefinition } from './ListDefinition';
import { ListKeyValuePair } from './ListKeyValuePair';
import { RuntimeStory } from '../Story/Story';
export declare class RuntimeInkList {
    private _map;
    constructor({ originStory, otherList, singleElement, singleOriginListName, }?: {
        originStory?: RuntimeStory;
        otherList?: RuntimeInkList;
        singleElement?: ListKeyValuePair;
        singleOriginListName?: string;
    });
    readonly Add: (key: RuntimeInkListItem, value: number) => void;
    readonly Get: (key: RuntimeInkListItem) => number;
    readonly Has: (key: RuntimeInkListItem) => boolean;
    static FromString: (myListItem: string, originStory: RuntimeStory) => RuntimeInkList;
    readonly AddItem: (item: string | RuntimeInkListItem) => void;
    readonly ContainsItemNamed: (itemName: string) => boolean;
    origins: RuntimeListDefinition[];
    get originOfMaxItem(): RuntimeListDefinition;
    get originNames(): string[];
    private _originNames;
    readonly SetInitialOriginName: (initialOriginName: string) => void;
    readonly SetInitialOriginNames: (initialOriginNames: string[]) => void;
    get maxItem(): ListKeyValuePair;
    get minItem(): ListKeyValuePair;
    get inverse(): RuntimeInkList;
    get all(): RuntimeInkList;
    get orderedItems(): ListKeyValuePair[];
    readonly Union: (otherList: RuntimeInkList) => RuntimeInkList;
    readonly Intersect: (otherList: RuntimeInkList) => RuntimeInkList;
    readonly Without: (listToRemove: RuntimeInkList) => RuntimeInkList;
    readonly Contains: (otherList: RuntimeInkList) => boolean;
    readonly Size: () => number;
    readonly Keys: () => RuntimeInkListItem[];
    readonly Remove: (key: RuntimeInkListItem) => void;
    readonly GreaterThan: (otherList: RuntimeInkList) => boolean;
    readonly GreaterThanOrEquals: (otherList: RuntimeInkList) => boolean;
    readonly LessThan: (otherList: RuntimeInkList) => boolean;
    readonly LessThanOrEquals: (otherList: RuntimeInkList) => boolean;
    readonly MaxAsList: () => RuntimeInkList;
    readonly MinAsList: () => RuntimeInkList;
    readonly ListWithSubRange: (minBound: number | RuntimeInkList, maxBound: number | RuntimeInkList) => RuntimeInkList;
    Equals: (other: any) => boolean;
    readonly ToString: () => string;
}

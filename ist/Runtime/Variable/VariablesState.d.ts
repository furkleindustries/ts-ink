import { RuntimeObject } from '../Object';
import { StatePatch } from '../Story/StatePatch';
import { CallStack } from '../CallStack/CallStack';
import { ListDefinitionsOrigin } from '../ListDefinitionsOrigin';
import { VariablePointerValue } from '../Value/VariablePointerValue';
import { RuntimeVariableAssignment } from './VariableAssignment';
declare type VariableChanged = (variableName: string, newValue: RuntimeObject) => void;
export declare class VariablesState {
    private _callStack;
    private _listDefsOrigin;
    variableChangedEvent: VariableChanged;
    private _globalVariables;
    get globalVariables(): Map<string, RuntimeObject>;
    private _defaultGlobalVariables;
    get defaultGlobalVariables(): Map<string, RuntimeObject>;
    get callStack(): CallStack;
    set callStack(value: CallStack);
    private _changedVariablesForBatchObs;
    get changedVariablesForBatchObs(): Set<string>;
    get listDefsOrigin(): ListDefinitionsOrigin;
    private _patch;
    get patch(): StatePatch;
    set patch(value: StatePatch);
    private _batchObservingVariableChanges;
    get batchObservingVariableChanges(): boolean;
    set batchObservingVariableChanges(value: boolean);
    readonly $: (variableName: string) => string | number | boolean | import("../Path").RuntimePath | import("../List/InkList").RuntimeInkList | null;
    constructor(_callStack: CallStack, _listDefsOrigin: ListDefinitionsOrigin);
    readonly ApplyPatch: () => void;
    readonly SetJsonToken: (jToken: Record<string, any>) => void;
    static dontSaveDefaultValues: boolean;
    readonly GetSerializedRepresentation: () => void;
    readonly RuntimeObjectsEqual: (obj1: RuntimeObject, obj2: RuntimeObject) => any;
    readonly GetVariableWithName: (name: string, contextIndex?: number) => RuntimeObject;
    readonly TryGetDefaultVariableValue: (name: string) => RuntimeObject;
    readonly GlobalVariableExistsWithName: (name: string) => boolean;
    readonly GetRawVariableWithName: (name: string, contextIndex: number) => RuntimeObject;
    readonly ValueAtVariablePointer: (pointer: VariablePointerValue) => RuntimeObject;
    readonly Assign: (varAss: RuntimeVariableAssignment, value: RuntimeObject) => void;
    readonly SnapshotDefaultGlobals: () => void;
    readonly RetainListOriginsForAssignment: (oldValue: RuntimeObject, newValue: RuntimeObject) => void;
    readonly SetGlobal: (variableName: string, value: RuntimeObject) => void;
    readonly ResolveVariablePointer: (varPointer: VariablePointerValue) => VariablePointerValue;
    readonly GetContextIndexOfVariableNamed: (varName: string) => number;
}
export {};

import { RuntimeChoice } from '../Choice/Choice';
import { ChoicePoint } from '../Choice/ChoicePoint';
import { RuntimeContainer } from '../Container';
import { DebugMetadata } from '../../DebugMetadata';
import { ExternalFunction } from './ExternalFunction';
import { RuntimeListDefinition } from '../List/ListDefinition';
import { ListDefinitionsOrigin } from '../ListDefinitionsOrigin';
import { RuntimeObject } from '../Object';
import { OutputStateChange } from './OutputStateChange';
import { RuntimePath } from '../Path';
import { Pointer } from '../Pointer';
import { Profiler } from '../../Profiler';
import { SearchResult } from '../SearchResult';
import { StoryState } from './StoryState';
import { VariableObserver } from '../Variable/VariableObserver';
import { VariablesState } from '../Variable/VariablesState';
export declare class RuntimeStory extends RuntimeObject {
    private _mainContentContainer;
    get mainContentContainer(): RuntimeContainer;
    private _listDefinitions;
    get listDefinitions(): ListDefinitionsOrigin;
    private _externals;
    get externals(): Map<string, ExternalFunction>;
    private _variableObservers;
    get variableObservers(): Map<string, VariableObserver[]>;
    private _hasValidatedExternals;
    get hasValidatedExternals(): boolean;
    private _temporaryEvaluationContainer;
    get temporaryEvaluationContainer(): RuntimeContainer;
    get currentDebugMetadata(): DebugMetadata;
    get currentLineNumber(): number;
    private _state;
    get state(): StoryState;
    private _asyncContinueActive;
    get asyncContinueActive(): boolean;
    private _stateSnapshotAtLastNewline;
    get stateSnapshotAtLastNewline(): StoryState;
    private _recursiveContinueCount;
    get recursiveContinueCount(): number;
    private _asyncSaving;
    get asyncSaving(): boolean;
    private _profiler;
    get profiler(): Profiler;
    get inkVersionCurrent(): number;
    get inkVersionMinimumCompatible(): number;
    get currentChoices(): RuntimeChoice[];
    get currentText(): string;
    get currentTags(): string[];
    get currentErrors(): string[];
    currentWarnings(): string[];
    get hasError(): boolean;
    get hasWarning(): boolean;
    get variablesState(): VariablesState;
    onDidContinue: () => void;
    onMakeChoice: (choice: RuntimeChoice) => void;
    onEvaluateFunction: (argOne: string, argtwo: any[]) => void;
    onCompleteEvaluateFunction: (argOne: string, argTwo: any[], argThree: string, argFour?: any) => void;
    onChoosePathString: (argOne: string, argtwo: object[]) => void;
    readonly StartProfiling: () => Profiler;
    readonly EndProfiling: () => void;
    constructor({ contentContainer, lists, jsonString, }?: {
        readonly contentContainer?: RuntimeContainer;
        readonly lists?: RuntimeListDefinition[];
        readonly jsonString?: string;
    });
    readonly ToJson: () => string;
    readonly GetSerializedRepresentation: (story: RuntimeStory) => {
        inkVersion: number;
        root: any[];
        listDefs: RuntimeListDefinition | null;
    };
    readonly ResetState: () => void;
    readonly ResetErrors: () => void;
    readonly ResetCallstack: () => void;
    readonly ResetGlobals: () => void;
    readonly Continue: () => string;
    get canContinue(): boolean;
    get asyncContinueComplete(): boolean;
    readonly ContinueAsync: (millisecsLimitAsync: number) => void;
    readonly ContinueInternal: (millisecsLimitAsync?: number) => void;
    readonly ContinueSingleStep: () => boolean;
    readonly CalculateNewlineOutputStateChange: (prevText: string, currText: string, prevTagCount: number, currTagCount: number) => OutputStateChange;
    readonly ContinueMaximally: () => string;
    readonly ContentAtPath: (path: RuntimePath) => SearchResult;
    readonly KnotContainerWithName: (name: string) => RuntimeContainer;
    readonly PointerAtPath: (path: RuntimePath) => Pointer;
    readonly StateSnapshot: () => void;
    readonly RestoreStateSnapshot: () => void;
    readonly DiscardSnapshot: () => void;
    readonly CopyStateForBackgroundThreadSave: () => StoryState;
    readonly BackgroundSaveComplete: () => void;
    readonly Step: () => void;
    readonly VisitContainer: (container: RuntimeContainer, atStart: boolean) => void;
    private _prevContainers;
    get prevContainers(): RuntimeContainer[];
    readonly VisitChangedContainersDueToDivert: () => void;
    readonly ProcessChoice: (choicePoint: ChoicePoint) => RuntimeChoice;
    readonly IsTruthy: (obj: RuntimeObject) => boolean;
    readonly PerformLogicAndFlowControl: (contentObj: RuntimeObject) => boolean;
    readonly ChoosePathString: (path: string, resetCallstack?: boolean, ...args: any[]) => void;
    readonly IfAsyncWeCant: (activityStr: string) => void;
    readonly ChoosePath: (p: RuntimePath, incrementingTurnIndex?: boolean) => void;
    readonly ChooseChoiceIndex: (choiceIdx: number) => void;
    readonly HasFunction: (functionName: string) => boolean;
    readonly EvaluateFunction: (functionName: string, ...args: any[]) => any;
    readonly EvaluateExpression: (exprContainer: RuntimeContainer) => RuntimeObject;
    allowExternalFunctionFallbacks: Function;
    readonly CallExternalFunction: (funcName: string, numberOfArguments: number) => void;
    readonly BindExternalFunctionGeneral: (funcName: string, func: ExternalFunction) => void;
    readonly TryCoerce: <T extends "string" | "boolean" | "float" | "int">(value: any, T: T) => string | number | boolean;
    readonly BindExternalFunction: (funcName: string, func: (...args: any[]) => any, ...args: any[]) => void;
    readonly UnbindExternalFunction: (funcName: string) => void;
    private _validateWithObj;
    readonly ValidateExternalBindings: (c?: RuntimeContainer | undefined, missingExternals?: Set<string>) => void;
    readonly ObserveVariable: (variableName: string, observer: VariableObserver) => void;
    readonly ObserveVariables: (variableNames: string[], observer: VariableObserver) => void;
    readonly RemoveVariableObserver: (observer?: VariableObserver, specificVariableName?: string) => void;
    readonly VariableStateDidChangeEvent: (variableName: string, newValueObj: RuntimeObject) => void;
    get globalTags(): string[];
    readonly TagsForContentAtPath: (path: string) => string[];
    readonly TagsAtStartOfFlowContainerWithPathString: (pathString: string) => string[];
    readonly BuildStringOfHierarchy: () => string;
    readonly BuildStringOfContainer: (container: RuntimeContainer) => string;
    readonly NextContent: () => void;
    readonly IncrementContentPointer: () => boolean;
    readonly TryFollowDefaultInvisibleChoice: () => boolean;
    get nextSequenceShuffleIndex(): number;
    readonly Error: (message: string, useEndLineNumber?: boolean) => void;
    readonly Warning: (message: string) => void;
    readonly AddError: (msg: string, isWarning?: boolean, useEndLineNumber?: boolean) => void;
    readonly Assert: (condition: boolean, message?: string, ...formatParams: any[]) => void;
}

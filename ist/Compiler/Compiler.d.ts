import { CompilerOptions } from './CompilerOptions';
import { DebugMetadata } from '../DebugMetadata';
import { DebugSourceRange } from './DebugSourceRange';
import { ErrorType } from './Parser/ErrorType';
import { InkParser } from './Parser/InkParser';
import { PluginManager } from '../Plugins/PluginManager';
import { RuntimeStory } from '../Runtime/Story/Story';
import { Story } from './Parser/ParsedHierarchy/Story';
export declare class Compiler {
    private _errors;
    get errors(): string[];
    private _warnings;
    get warnings(): string[];
    private _authorMessages;
    get authorMessages(): string[];
    private _inputString;
    get inputString(): string;
    private _options;
    get options(): CompilerOptions;
    private _pluginManager;
    get pluginManager(): PluginManager;
    private _parsedStory;
    get parsedStory(): Story;
    private _runtimeStory;
    get runtimeStory(): RuntimeStory;
    private _parser;
    get parser(): InkParser;
    private _debugSourceRanges;
    get debugSourceRanges(): DebugSourceRange[];
    constructor(inkSource: string, options?: CompilerOptions);
    readonly Compile: () => RuntimeStory;
    readonly RetrieveDebugSourceForLatestContent: () => void;
    readonly DebugMetadataForContentAtOffset: (offset: number) => DebugMetadata;
    readonly OnError: (message: string, errorType: ErrorType) => void;
}

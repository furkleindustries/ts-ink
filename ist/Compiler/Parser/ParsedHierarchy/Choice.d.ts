import { RuntimeContainer } from '../../../Runtime/Container';
import { ContentList } from './ContentList';
import { Expression } from './Expression/Expression';
import { INamedContent } from '../../../INamedContent';
import { IWeavePoint } from './IWeavePoint';
import { Object } from './Object';
import { RuntimeObject } from '../../../Runtime/Object';
import { RuntimePath } from '../../../Runtime/Path';
import { Story } from './Story';
export declare class Choice extends Object implements IWeavePoint, INamedContent {
    private _condition;
    private _innerContentContainer;
    private _outerContainer;
    private _runtimeChoice;
    private _returnToR1;
    private _returnToR2;
    private _r1Label;
    private _r2Label;
    private _divertToStartContentOuter;
    private _divertToStartContentInner;
    private _startContentRuntimeContainer;
    startContent: ContentList;
    choiceOnlyContent: ContentList;
    innerContent: ContentList;
    name: string;
    onceOnly: boolean;
    isInvisibleDefault: boolean;
    indentationDepth: number;
    hasWeaveStyleInlineBrackets: boolean;
    get condition(): Expression;
    set condition(value: Expression);
    get runtimeContainer(): RuntimeContainer;
    get innerContentContainer(): RuntimeContainer;
    get containerForCounting(): RuntimeContainer;
    get runtimePath(): RuntimePath;
    constructor(startContent: ContentList, choiceOnlyContent: ContentList, innerContent: ContentList);
    readonly GenerateRuntimeObject: () => RuntimeObject;
    ResolveReferences: (context: Story) => void;
    readonly ToString: () => string;
}
